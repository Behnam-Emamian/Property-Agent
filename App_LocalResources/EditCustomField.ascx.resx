<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Email.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="AddCustomField.Text" xml:space="preserve">
    <value>Add Custom Field</value>
  </data>
  <data name="Caption.Help" xml:space="preserve">
    <value>Enter a caption for the custom field</value>
  </data>
  <data name="Caption.Text" xml:space="preserve">
    <value>Caption</value>
  </data>
  <data name="CaptionHelp.Help" xml:space="preserve">
    <value>Enter help text for the caption.</value>
  </data>
  <data name="CaptionHelp.Text" xml:space="preserve">
    <value>Caption Help</value>
  </data>
  <data name="CaptionHidden.Help" xml:space="preserve">
    <value>Check to make the caption hidden.</value>
  </data>
  <data name="CaptionHidden.Text" xml:space="preserve">
    <value>Caption Hidden</value>
  </data>
  <data name="CheckBox.Text" xml:space="preserve">
    <value>Checkbox</value>
  </data>
  <data name="Confirmation.Text" xml:space="preserve">
    <value>Are you sure you want to delete this custom field?</value>
  </data>
  <data name="Currency.Text" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="CustomFieldDetails.Text" xml:space="preserve">
    <value>Custom Field Details</value>
  </data>
  <data name="CustomFieldDetailsDescription.Text" xml:space="preserve">
    <value>Enter the details of your custom field and then click "update".</value>
  </data>
  <data name="CustomFieldManager.Text" xml:space="preserve">
    <value>Custom Field Manager</value>
  </data>
  <data name="Date.Text" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Default.Text" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="DefaultValue.Help" xml:space="preserve">
    <value>Enter a default value for the custom field</value>
  </data>
  <data name="DefaultValue.Text" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="DisplayDetails.Text" xml:space="preserve">
    <value>Display Details</value>
  </data>
  <data name="DisplayDetailsDescription.Text" xml:space="preserve">
    <value>Specify details about display settings.</value>
  </data>
  <data name="Double.Text" xml:space="preserve">
    <value>Double</value>
  </data>
  <data name="DropDownList.Text" xml:space="preserve">
    <value>Drop Down List</value>
  </data>
  <data name="EditCustomField.Text" xml:space="preserve">
    <value>Edit Custom Field</value>
  </data>
  <data name="Featured.Help" xml:space="preserve">
    <value>Check to display this field in the featured area.</value>
  </data>
  <data name="Featured.Text" xml:space="preserve">
    <value>Featured</value>
  </data>
  <data name="FieldElementHelp.Text" xml:space="preserve">
    <value>Separate values with a |, e.g. House|Land|Unit</value>
  </data>
  <data name="FieldElementRangeHelp.Text" xml:space="preserve">
    <value>&lt;br&gt;Separate values with a | (e.g. House|Land|Unit), leave blank to make search a plain textbox.</value>
  </data>
  <data name="FieldElements.Help" xml:space="preserve">
    <value>Enter field elements for the custom field, separate values with a |, e.g. House|Land|Unit</value>
  </data>
  <data name="FieldElements.Text" xml:space="preserve">
    <value>Field Elements</value>
  </data>
  <data name="FieldElementsFrom.Help" xml:space="preserve">
    <value>Enter a range of values separated by a | to represent the range's from values.</value>
  </data>
  <data name="FieldElementsFrom.Text" xml:space="preserve">
    <value>Field Elements From</value>
  </data>
  <data name="FieldElementsTo.Help" xml:space="preserve">
    <value>Enter a range of values separated by a | to represent the range's to values.</value>
  </data>
  <data name="FieldElementsTo.Text" xml:space="preserve">
    <value>Field Elements To</value>
  </data>
  <data name="FieldType.Help" xml:space="preserve">
    <value>Select a field type for the custom field</value>
  </data>
  <data name="FieldType.Text" xml:space="preserve">
    <value>Field Type</value>
  </data>
  <data name="Hidden.Help" xml:space="preserve">
    <value>Check to make the field hidden to end users.</value>
  </data>
  <data name="Hidden.Text" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="Integer.Text" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="Listing.Help" xml:space="preserve">
    <value>Check to display this field in the listing area.</value>
  </data>
  <data name="Listing.Text" xml:space="preserve">
    <value>Listing</value>
  </data>
  <data name="LockDown.Help" xml:space="preserve">
    <value>Check to make the field locked for editing by unauthorized users.</value>
  </data>
  <data name="LockDown.Text" xml:space="preserve">
    <value>LockDown</value>
  </data>
  <data name="Main.Text" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="Manager.Help" xml:space="preserve">
    <value>Check to display this field in the property manager area.</value>
  </data>
  <data name="Manager.Text" xml:space="preserve">
    <value>Manager</value>
  </data>
  <data name="MultiCheckBox.Text" xml:space="preserve">
    <value>Multi Checkbox</value>
  </data>
  <data name="MultiLineTextBox.Text" xml:space="preserve">
    <value>Multi Line Text Box</value>
  </data>
  <data name="Multiple.Text" xml:space="preserve">
    <value>Select Multiple</value>
  </data>
  <data name="Name.Help" xml:space="preserve">
    <value>Enter a name for the custom field</value>
  </data>
  <data name="Name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="OneLineTextBox.Text" xml:space="preserve">
    <value>One Line Text Box</value>
  </data>
  <data name="plMaximumLength.Help" xml:space="preserve">
    <value>Type a number for the maximum number of characters.</value>
  </data>
  <data name="plMaximumLength.Text" xml:space="preserve">
    <value>Maximum Length</value>
  </data>
  <data name="Published.Help" xml:space="preserve">
    <value>Check to make the field active.</value>
  </data>
  <data name="Published.Text" xml:space="preserve">
    <value>Published?</value>
  </data>
  <data name="RadioButton.Text" xml:space="preserve">
    <value>Radio Button</value>
  </data>
  <data name="Range.Text" xml:space="preserve">
    <value>Select Range</value>
  </data>
  <data name="Required.Help" xml:space="preserve">
    <value>Check to make the field required.</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required?</value>
  </data>
  <data name="RequiredDetails.Text" xml:space="preserve">
    <value>Requirement Details</value>
  </data>
  <data name="RequiredDetailsDescription.Text" xml:space="preserve">
    <value>Specify details about requirement settings.</value>
  </data>
  <data name="RichTextBox.Text" xml:space="preserve">
    <value>Rich Text Box</value>
  </data>
  <data name="Searchable.Help" xml:space="preserve">
    <value>Check to make the field searchable.</value>
  </data>
  <data name="Searchable.Text" xml:space="preserve">
    <value>Searchable?</value>
  </data>
  <data name="SearchDetails.Text" xml:space="preserve">
    <value>Search Details</value>
  </data>
  <data name="SearchDetailsDescription.Text" xml:space="preserve">
    <value>Specify details about search settings.</value>
  </data>
  <data name="SearchType.Help" xml:space="preserve">
    <value>Select a search type for the custom field</value>
  </data>
  <data name="SearchType.Text" xml:space="preserve">
    <value>Search Type</value>
  </data>
  <data name="Sortable.Help" xml:space="preserve">
    <value>Check to be able to sort on this field.</value>
  </data>
  <data name="Sortable.Text" xml:space="preserve">
    <value>Sortable</value>
  </data>
  <data name="valCaption.Text" xml:space="preserve">
    <value>&lt;br&gt;You must enter a valid caption.</value>
  </data>
  <data name="valFieldElements.Text" xml:space="preserve">
    <value>&lt;br&gt;You must enter valid field elements.</value>
  </data>
  <data name="valFieldElementsFrom.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Field elements invalid, unable to match 'validation type'.</value>
  </data>
  <data name="valFieldElementsTo.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Field elements invalid, unable to match 'validation type'.</value>
  </data>
  <data name="ValidationType.Help" xml:space="preserve">
    <value>Select a validation type for the custom field</value>
  </data>
  <data name="ValidationType.Text" xml:space="preserve">
    <value>Validation Type</value>
  </data>
  <data name="valMaximumLengthIsNumber.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Maximum length must be a number.</value>
  </data>
  <data name="valName.Text" xml:space="preserve">
    <value>&lt;br&gt;You must enter a valid name.</value>
  </data>
  <data name="FileUpload.Text" xml:space="preserve">
    <value>File Upload</value>
  </data>
  <data name="Hyperlink.Text" xml:space="preserve">
    <value>Hyperlink</value>
  </data>
  <data name="DropDown.Text" xml:space="preserve">
    <value>Dropdown</value>
  </data>
  <data name="LinkedToPropertyType.Text" xml:space="preserve">
    <value>Linked to Property Type</value>
  </data>
  <data name="Standard.Text" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="plRegex.Help" xml:space="preserve">
    <value>Enter a regular expression to validate against.</value>
  </data>
  <data name="plRegex.Text" xml:space="preserve">
    <value>Regular Expression</value>
  </data>
  <data name="Regex.Text" xml:space="preserve">
    <value>Regular Expression</value>
  </data>
  <data name="plIncludeCount.Help" xml:space="preserve">
    <value>Check to include count in the search dropdown.</value>
  </data>
  <data name="plIncludeCount.Text" xml:space="preserve">
    <value>Include Count?</value>
  </data>
  <data name="LinkedToDropdown.Text" xml:space="preserve">
    <value>Linked to Drop Down List</value>
  </data>
  <data name="ListBox.Text" xml:space="preserve">
    <value>ListBox</value>
  </data>
  <data name="Single.Text" xml:space="preserve">
    <value>Select Single</value>
  </data>
  <data name="Label.Text" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="LabelDetails.Text" xml:space="preserve">
    <value>Label Details</value>
  </data>
  <data name="LabelDetailsDescription.Text" xml:space="preserve">
    <value>Enter the details for your label.</value>
  </data>
  <data name="plHideZeroCount.Help" xml:space="preserve">
    <value>Check to hide zero count items in the search dropdown.</value>
  </data>
  <data name="plHideZeroCount.Text" xml:space="preserve">
    <value>Hide Zero Count?</value>
  </data>
  <data name="plEditRoles.Help" xml:space="preserve">
    <value>Specify which roles can edit this custom field.</value>
  </data>
  <data name="plEditRoles.Text" xml:space="preserve">
    <value>Edit Roles</value>
  </data>
  <data name="plInheritSecurity.Help" xml:space="preserve">
    <value>Check to inherit security from "Submit" property permission.</value>
  </data>
  <data name="plInheritSecurity.Text" xml:space="preserve">
    <value>Inherit Security?</value>
  </data>
  <data name="SecurityDetails.Text" xml:space="preserve">
    <value>Security Details</value>
  </data>
  <data name="SecurityDetailsDescription.Text" xml:space="preserve">
    <value>Optionally override the security for the custom field.</value>
  </data>
  <data name="FieldElementHelpStandard.Text" xml:space="preserve">
    <value>Enter each value on a new line. </value>
  </data>
  <data name="SqlQuery.Text" xml:space="preserve">
    <value>SQL Query</value>
  </data>
</root>