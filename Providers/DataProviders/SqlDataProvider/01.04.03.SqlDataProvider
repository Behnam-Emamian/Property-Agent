DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyGet
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyGet
	@PropertyID int
AS

SELECT
	p.[PropertyID],
	p.[ModuleID],
	p.[PropertyTypeID],
	p.[IsFeatured],
	p.[DateCreated],
	p.[DateModified],
	p.[DatePublished],
	p.[DateExpired],
	p.[ViewCount],
	p.[Status], 
	p.[AuthorID], 
	pt.[Name] as 'PropertyTypeName',
	pt.[Description] as 'PropertyTypeDescription',
	(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID) as 'PhotoCount',
	(select top 1 [PhotoID] from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID order by SortOrder) as 'FirstPhotoID',
	u.[UserName],
	u.[FirstName] + ' ' + u.[LastName] as 'FullName',
	u.[Email]   
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Property p
		LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt 
			ON p.PropertyTypeID = pt.PropertyTypeID
		LEFT JOIN {databaseOwner}{objectQualifier}Users u
			ON p.AuthorID = u.UserID 
WHERE
	[PropertyID] = @PropertyID
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyList
	@ModuleID int, 
	@PropertyTypeID int,
	@MaxCount int,
	@Status int, 
	@AuthorID int, 
	@IsActive bit,
	@IsPending bit,
	@IsExpired bit,
	@ShowFeaturedOnly bit,
	@SortBy int,
	@SortByID int,
	@SortByIDType int,
	@SortOrder int,
	@CustomFieldIDs nvarchar(4000),
	@SearchValues	nvarchar(4000) 
AS

if( @MaxCount is not null )
begin
	SET ROWCOUNT @MaxCount 
end

SELECT
	p.[PropertyID],
	p.[ModuleID],
	p.[PropertyTypeID],
	p.[IsFeatured],
	p.[DateCreated],
	p.[DateModified],
	p.[DatePublished],
	p.[DateExpired],
	p.[ViewCount],
	p.[Status], 
	p.[AuthorID], 
	pt.[Name] as 'PropertyTypeName',
	pt.[Description] as 'PropertyTypeDescription',
	(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID) as 'PhotoCount',
	(select top 1 [PhotoID] from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID order by SortOrder) as 'FirstPhotoID',
	u.[UserName],
	u.[FirstName] + ' ' + u.[LastName] as 'FullName',
	u.[Email]   
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Property p
		LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt 
			ON p.PropertyTypeID = pt.PropertyTypeID
		LEFT JOIN {databaseOwner}{objectQualifier}Users u
			ON p.AuthorID = u.UserID 
WHERE
	p.[ModuleID] = @ModuleID
	and 
	(@PropertyTypeID is null or p.PropertyTypeID = @PropertyTypeID) 
	and
	(@Status is null or p.Status = @Status)
	and
	(@AuthorID is null or p.AuthorID = @AuthorID)
	and
	(@IsActive is null or (p.[DatePublished] < GetDate() and (p.[DateExpired] is null or p.[DateExpired] > GetDate())))
	and
	(@IsPending is null or (p.[DatePublished] > GetDate()))
	and
	(@IsExpired is null or (p.[DateExpired] is not null and p.[DateExpired] < GetDate()))
	and
	(@ShowFeaturedOnly is null or p.IsFeatured = 1)
	and
	((@CustomFieldIDs is null or @SearchValues is null) or (p.PropertyID in (select PropertyID from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldSearch(@CustomFieldIDs, @SearchValues))))
ORDER BY 
	CASE 
		WHEN @SortBy = 0 and @SortOrder = 1 THEN convert(varchar, p.[DateModified], 120)
              	WHEN @SortBy = 1 and @SortOrder = 1 THEN convert(varchar, p.[DatePublished], 120)
              	WHEN @SortBy = 3 and @SortOrder = 1 and (@SortByIDType <> 1 and @SortByIDType <> 3 and @SortByIDType <> 4) THEN 
			Case 
				WHEN @SortByID is null THEN convert(varchar, p.[DateModified], 120) 
				WHEN @SortByID is not null THEN (SELECT TOP 1 cast(CustomValue as nvarchar) FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyValue WHERE CustomFieldID = @SortByID AND PropertyID = p.[PropertyID])
			END
              END DESC,
	CASE 
		WHEN @SortBy = 0 and @SortOrder = 0 THEN convert(varchar, p.[DateModified], 120)
              	WHEN @SortBy = 1 and @SortOrder = 0 THEN convert(varchar, p.[DatePublished], 120)
              	WHEN @SortBy = 3 and @SortOrder = 0 and (@SortByIDType <> 1 and @SortByIDType <> 3 and @SortByIDType <> 4) THEN 
			Case 
				WHEN @SortByID is null THEN convert(varchar, p.[DateModified], 120) 
				WHEN @SortByID is not null THEN (SELECT TOP 1 cast(CustomValue as nvarchar) FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyValue WHERE CustomFieldID = @SortByID AND PropertyID = p.[PropertyID])
			END
              END ASC,
	CASE 
              	WHEN @SortBy = 2 and @SortOrder = 1 THEN p.[ViewCount] 
              END DESC,
	CASE 
              	WHEN @SortBy = 2 and @SortOrder = 0 THEN p.[ViewCount]
              END ASC,
	CASE 
		WHEN @SortBy = 3 and @SortOrder = 1 and (@SortByIDType = 1 or @SortByIDType = 3 or @SortByIDType = 4) THEN 
			Case 
				WHEN @SortByID is null THEN p.[ViewCount]
				WHEN @SortByID is not null THEN (SELECT TOP 1 cast(cast(CustomValue as nvarchar) as decimal) FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyValue WHERE CustomFieldID = @SortByID AND PropertyID = p.[PropertyID])
			END
              END DESC,
	CASE 
		WHEN @SortBy = 3 and @SortOrder = 0 and (@SortByIDType = 1 or @SortByIDType = 3 or @SortByIDType = 4) THEN 
			Case 
				WHEN @SortByID is null THEN p.[ViewCount]
				WHEN @SortByID is not null THEN (SELECT TOP 1 cast(cast(CustomValue as nvarchar) as decimal) FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyValue WHERE CustomFieldID = @SortByID AND PropertyID = p.[PropertyID])
			END
              END ASC,
	CASE 
		WHEN @SortBy = 4 THEN  CAST((rand(24701) * p.[PropertyID]) * 24701 AS int) % (DATEPART(ms, GetDate())+1) + DATEPART(ms, GetDate()) 
			END

GO

ALTER TABLE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType
	ADD [ImageFile] nvarchar(255) NULL
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeAdd
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeAdd
	@ParentID int, 
	@ModuleID int,
	@Name nvarchar(50),
	@Description ntext,
	@ImageFile nvarchar(255),
	@SortOrder int,
	@IsPublished bit
AS

INSERT INTO {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType (
	[ParentID], 
	[ModuleID],
	[Name],
	[Description],
	[ImageFile],
	[SortOrder],
	[IsPublished]
) VALUES (
	@ParentID, 
	@ModuleID,
	@Name,
	@Description,
	@ImageFile,
	@SortOrder,
	@IsPublished
)

select SCOPE_IDENTITY()
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeGet
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeGet
	@PropertyTypeID int
AS

SELECT
	[PropertyTypeID],
	[ParentID], 
	[ModuleID],
	[Name],
	[Description],
	CASE WHEN LEFT(LOWER(ImageFile), 6) = 'fileid' 
		THEN
			(SELECT Folder + FileName  
				FROM {databaseOwner}{objectQualifier}Files 
				WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}Files.FileID) = ImageFile
			) 
		ELSE 
			ImageFile  
		END 
	AS ImageFile,
	[SortOrder],
	[IsPublished]
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType
WHERE
	[PropertyTypeID] = @PropertyTypeID
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeList
	@ModuleID	int,
	@ShowPublishedOnly bit,
	@SortBy int,
	@ParentID int 
AS

SELECT
	pt.[PropertyTypeID],
	pt.[ParentID],
	pt.[ModuleID],
	pt.[Name],
	pt.[Description],
	CASE WHEN LEFT(LOWER(ImageFile), 6) = 'fileid' 
		THEN
			(SELECT Folder + FileName  
				FROM {databaseOwner}{objectQualifier}Files 
				WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}Files.FileID) = ImageFile
			) 
		ELSE 
			ImageFile  
		END 
	AS ImageFile,
	pt.[SortOrder],
	pt.[IsPublished],
	(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt2 where pt.PropertyTypeID = pt2.ParentID) as 'PropertyTypeCount', 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeCount(pt.[PropertyTypeID], 0, GetDate()) as 'PropertyCount'
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt 
WHERE
	[ModuleID] = @ModuleID
	and
	(@ShowPublishedOnly = 0 or pt.[IsPublished] = 1)
	and
	[ParentID] = @ParentID
ORDER BY
	CASE 
              	WHEN @SortBy = 0 THEN pt.[SortOrder]
              END,
	CASE 
              	WHEN @SortBy = 1 THEN  pt.[Name]
              END
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeListAll 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeListAll 
	@ModuleID int,
	@Current int, 	
	@ShowPublishedOnly bit,
	@SortBy int 
as
SET NOCOUNT ON
DECLARE @level int, @line int
 
CREATE TABLE #hierarchy(HierarchyID int IDENTITY (1,1), PropertyTypeID int, level int)
CREATE TABLE #stack (item int, level int)
INSERT INTO #stack VALUES (@current, 1)
SELECT @level = 1
 
WHILE @level > 0
BEGIN
   IF EXISTS (SELECT * FROM #stack WHERE level = @level)
      BEGIN
         SELECT @current = item
         FROM #stack
         WHERE level = @level
 
 	insert into #hierarchy(PropertyTypeID, level) values(@current, @level) 
 
         DELETE FROM #stack
         WHERE level = @level
            AND item = @current
 
         INSERT #stack
            SELECT PropertyTypeID, @level + 1
            FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType
            WHERE ParentID = @current and ModuleID = @ModuleID 
     	    ORDER BY 	
	CASE 
              	WHEN @SortBy = 0 THEN [SortOrder]
              END DESC,
	CASE 
              	WHEN @SortBy = 1 THEN  [Name]  
              END DESC

         IF @@ROWCOUNT > 0
            SELECT @level = @level + 1
      END
   ELSE
      SELECT @level = @level - 1
END -- WHILE
 
SELECT
	pt.[PropertyTypeID],
	pt.[ParentID],
	pt.[ModuleID],
	pt.[Name],
	pt.[Description],
	CASE WHEN LEFT(LOWER(ImageFile), 6) = 'fileid' 
		THEN
			(SELECT Folder + FileName  
				FROM {databaseOwner}{objectQualifier}Files 
				WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}Files.FileID) = ImageFile
			) 
		ELSE 
			ImageFile  
		END 
	AS ImageFile,
	pt.[SortOrder],
	pt.[IsPublished],
	(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt2 where pt.PropertyTypeID = pt2.ParentID) as 'PropertyTypeCount', 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeCount(pt.[PropertyTypeID], 0, GetDate()) as 'PropertyCount',
	REPLICATE('.',(level-2)*2) + pt.[Name] as 'NameIndented' 
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt, #hierarchy
WHERE 
	#hierarchy.PropertyTypeID = pt.PropertyTypeID
	AND
	pt.[ModuleID] = @ModuleID
	and
	(@ShowPublishedOnly = 0 or pt.[IsPublished] = 1)
ORDER BY HierarchyID 

drop table #hierarchy
drop table #stack
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeUpdate
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyTypeUpdate
	@PropertyTypeID int, 
	@ParentID int, 
	@ModuleID int, 
	@Name nvarchar(50), 
	@Description ntext, 
	@ImageFile nvarchar(255), 
	@SortOrder int, 
	@IsPublished bit 
AS

UPDATE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType SET
	[ParentID] = @ParentID, 
	[ModuleID] = @ModuleID,
	[Name] = @Name,
	[Description] = @Description,
	[ImageFile] = @ImageFile, 
	[SortOrder] = @SortOrder,
	[IsPublished] = @IsPublished
WHERE
	[PropertyTypeID] = @PropertyTypeID
GO
