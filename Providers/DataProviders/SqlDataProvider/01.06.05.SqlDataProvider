DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyGet
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyGet
	@PropertyID int
AS

SELECT
	p.[PropertyID],
	p.[ModuleID],
	p.[PropertyTypeID],
	p.[IsFeatured],
	p.[DateCreated],
	p.[DateModified],
	p.[DatePublished],
	p.[DateExpired],
	p.[ViewCount],
	p.[Status], 
	p.[AuthorID], 
	p.[Rating], 
	p.[RatingCount], 
	p.[CommentCount], 
	pt.[Name] as 'PropertyTypeName',
	pt.[Description] as 'PropertyTypeDescription',
	(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID) as 'PhotoCount',
	(select top 1 [PhotoID] from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID order by SortOrder) as 'FirstPhotoID',
	u.[UserName],
	u.[DisplayName],
	u.[FirstName] + ' ' + u.[LastName] as 'FullName',
	u.[Email],
	b.[BrokerID] as 'BrokerID',
	Broker.[Username] as 'BrokerUsername',
	Broker.[DisplayName] as 'BrokerDisplayName',
	Broker.[Email] as 'BrokerEmail',  
	m.[UserID] as 'ModifiedID',
	m.[Username] as 'ModifiedUsername',
	m.[DisplayName] as 'ModifiedDisplayName',
	m.[Email] as 'ModifiedEmail'  
FROM 
	{databaseOwner}{objectQualifier}ventrian_propertyagent_property p
	LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt ON p.PropertyTypeID = pt.PropertyTypeID
	LEFT JOIN {databaseOwner}{objectQualifier}Users u ON p.AuthorID = u.UserID 
	LEFT JOIN {databaseOwner}{objectQualifier}Users m ON p.ModifiedID = m.UserID
	LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker b ON b.UserID = p.AuthorID and b.ModuleID = p.ModuleID
	LEFT JOIN {databaseOwner}{objectQualifier}Users as Broker ON b.BrokerID = Broker.UserID 
WHERE
	p.[PropertyID] = @PropertyID
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyList
	@ModuleID int, 
	@PropertyTypeID int,
	@Status int, 
	@AuthorID int, 
	@BrokerID int, 
	@IsActive bit,
	@IsPending bit,
	@IsExpired bit,
	@ShowFeaturedOnly bit,
	@SortBy int,
	@SortByID int,
	@SortByIDType int,
	@SortOrder int,
	@CustomFieldIDs nvarchar(4000),
	@SearchValues	nvarchar(4000),
	@PageNumber int, 
	@PageSize int,
	@BubbleFeatured bit,
	@SearchSubTypes bit
AS

CREATE TABLE #TempItems 
(
   ID int IDENTITY,
   PropertyID int
)

IF( @PropertyTypeID is not null and @SearchSubTypes = 1 )
BEGIN
	DECLARE @current int
	SELECT @current = @PropertyTypeID
	DECLARE @level int, @line int
 
	CREATE TABLE #hierarchy(HierarchyID int IDENTITY (1,1), PropertyTypeID int, level int)
	CREATE TABLE #stack (item int, level int)
	INSERT INTO #stack VALUES (@current, 1)
	SELECT @level = 1
 
	WHILE @level > 0
	BEGIN
   		IF EXISTS (SELECT * FROM #stack WHERE level = @level)
      		BEGIN
         			SELECT @current = item
         			FROM #stack
         			WHERE level = @level
 
 			insert into #hierarchy(PropertyTypeID, level) values(@current, @level) 
 
         			DELETE FROM #stack
         			WHERE level = @level
            			AND item = @current
 
         			INSERT #stack
            			SELECT PropertyTypeID, @level + 1
            			FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType
            			WHERE ParentID = @current and ModuleID = @ModuleID 

         			IF @@ROWCOUNT > 0
            				SELECT @level = @level + 1
      			END
   		ELSE
     	 		SELECT @level = @level - 1
	END -- WHILE
END

IF (@CustomFieldIDs is not null AND @SearchValues is not null)
BEGIN
	CREATE TABLE #SearchItems 
	(
   		PropertyID int
	)

	INSERT INTO #SearchItems select PropertyID from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldSearch(@CustomFieldIDs, @SearchValues)
END
 
DECLARE @maxRow int
DECLARE @startRowIndex int

SET @startRowIndex = (@PageNumber * @PageSize)

SET @maxRow = (@startRowIndex + @PageSize)
SET ROWCOUNT @maxRow

DECLARE @strFields	nvarchar(2000)
DECLARE @strFrom	nvarchar(2000)
DECLARE @strWhere	nvarchar(2000)
DECLARE @strOrder	nvarchar(2000)

DECLARE @strWhereSortByConditional	nvarchar(2000)
DECLARE @strWhereByFinal	nvarchar(2000)

SELECT @strFields = 'SELECT p.[PropertyID] '
SELECT @strFrom = ' FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Property p'
SELECT @strWhere = ' WHERE p.[ModuleID] = ' + convert(nvarchar, @ModuleId)
SELECT @strOrder = ' ORDER BY'

SELECT @strWhereSortByConditional = ''
SELECT @strWhereByFinal = ''

IF (@PropertyTypeID is not null and @SearchSubTypes = 1)
	SELECT @strWhere = @strWhere + ' AND p.PropertyTypeID in (select PropertyTypeID from #hierarchy)'

IF (@PropertyTypeID is not null and @SearchSubTypes = 0)
	SELECT @strWhere = @strWhere + ' AND p.PropertyTypeID = ' + convert(nvarchar, @PropertyTypeID)

IF (@Status is not null)
	SELECT @strWhere = @strWhere + ' AND p.Status = ' + convert(nvarchar, @Status)

IF (@AuthorID is not null)
	SELECT @strWhere = @strWhere + ' AND p.AuthorID = ' + convert(nvarchar, @AuthorID)

IF (@BrokerID is not null)
BEGIN
	SELECT @strFrom = @strFrom + ' LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker b ON p.AuthorID = b.UserID'
	SELECT @strWhere = @strWhere + ' AND (p.AuthorID = ' + convert(nvarchar, @BrokerID) + ' or b.BrokerID = ' + convert(nvarchar, @BrokerID) + ')'
END

IF (@IsActive is not null)
	SELECT @strWhere = @strWhere + ' AND (p.[DatePublished] < GetDate() and (p.[DateExpired] is null or p.[DateExpired] > GetDate()))'

IF (@IsPending is not null)
	SELECT @strWhere = @strWhere + ' AND (p.[DatePublished] > GetDate())'

IF (@IsExpired is not null)
	SELECT @strWhere = @strWhere + ' AND (p.[DateExpired] is not null and p.[DateExpired] < GetDate())'

IF (@ShowFeaturedOnly is not null)
	SELECT @strWhere = @strWhere + ' AND p.IsFeatured = 1'

IF (@CustomFieldIDs is not null AND @SearchValues is not null)
	SELECT @strWhere = @strWhere + ' AND (p.PropertyID in (select PropertyID from #SearchItems))'

IF (@BubbleFeatured = 1)
	SELECT @strOrder = @strOrder + ' p.[IsFeatured] DESC' 

DECLARE @strOrder2 nvarchar(2000)	

IF (@SortBy = 3) 
BEGIN
	SELECT @strFrom = @strFrom + ' LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyValue pv ON p.PropertyID = pv.PropertyID'
	
	SELECT @strOrder2 = ''	
		
	IF( @SortOrder = 1 and @SortByIDType is null)
	BEGIN
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) DESC'
	END
		
	IF( @SortOrder = 0 and @SortByIDType is null)
	BEGIN
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) ASC'
	END
		
	IF( @SortOrder = 1 and (@SortByIDType <> 1 and @SortByIDType <> 3 and @SortByIDType <> 4) )
	BEGIN
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) DESC'
	END

	IF( @SortOrder = 0 and (@SortByIDType <> 1 and @SortByIDType <> 3 and @SortByIDType <> 4) )
	BEGIN
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) ASC'
	END

	IF( @SortOrder = 1 and (@SortByIDType = 1 or @SortByIDType = 3 or @SortByIDType = 4) )
	BEGIN
		SELECT @strWhereSortByConditional = @strWhere + ' AND (pv.[CustomFieldID] is null)'
		SELECT @strWhereByFinal = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(cast(pv.CustomValue as nvarchar) as decimal) DESC'
	END

	IF( @SortOrder = 0 and (@SortByIDType = 1 or @SortByIDType = 3 or @SortByIDType = 4) )
	BEGIN
		SELECT @strWhereSortByConditional = @strWhere + ' AND (pv.[CustomFieldID] is null)'
		SELECT @strWhereByFinal = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(cast(pv.CustomValue as nvarchar) as decimal) ASC'
	END

	IF( @strOrder = ' ORDER BY' ) 
	BEGIN
		SELECT @strOrder = @strOrder + @strOrder2
	END
	ELSE
	BEGIN
		SELECT @strOrder = @strOrder + ',' + @strOrder2
	END
END
ELSE
BEGIN
	SELECT @strOrder2 = ''	

	IF( @SortBy = 0 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DateModified], 120) DESC'
	END

	IF( @SortBy = 0 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DateModified], 120) ASC'
	END

	IF( @SortBy = 1 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DatePublished], 120) DESC'
	END

	IF( @SortBy = 1 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DatePublished], 120) ASC'
	END

	IF( @SortBy = 2 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' p.[ViewCount] DESC'
	END

	IF( @SortBy = 2 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' p.[ViewCount] ASC'
	END

	IF( @SortBy = 4 )
	BEGIN
		SELECT @strOrder2 = ' CAST((rand(24701) * p.[PropertyID]) * 24701 AS int) % (DATEPART(ms, GetDate())+1) + DATEPART(ms, GetDate())'
	END

	IF( @SortBy = 5 )
	BEGIN
		SELECT @strFrom = @strFrom + ' LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt ON p.PropertyTypeID = pt.PropertyTypeID'
		IF( @SortOrder = 1 )
		BEGIN
			SELECT @strOrder2 = ' pt.[Name] DESC'
		END

		IF( @SortOrder = 0 )
		BEGIN
			SELECT @strOrder2 = ' pt.[Name] ASC'
		END
	END

	IF( @SortBy = 6 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' p.[CommentCount] DESC'
	END

	IF( @SortBy = 6 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' p.[CommentCount] ASC'
	END

	IF( @SortBy = 7 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' p.[Rating] DESC'
	END

	IF( @SortBy = 7 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' p.[Rating] ASC'
	END

	IF( @strOrder = ' ORDER BY' ) 
	BEGIN
		SELECT @strOrder = @strOrder + @strOrder2
	END
	ELSE
	BEGIN
		SELECT @strOrder = @strOrder + ',' + @strOrder2
	END
END

EXEC('INSERT INTO #TempItems (PropertyID) ' + @strFields + @strFrom + @strWhere + @strOrder)

IF( @strWhereSortByConditional != '' )
BEGIN
	EXEC('INSERT INTO #TempItems (PropertyID) ' + @strFields + @strFrom + @strWhereSortByConditional)
END

if( @PageSize > 0 )
	SET ROWCOUNT @PageSize

SELECT
	p.[PropertyID],
	p.[ModuleID],
	p.[PropertyTypeID],
	p.[IsFeatured],
	p.[DateCreated],
	p.[DateModified],
	p.[DatePublished],
	p.[DateExpired],
	p.[ViewCount],
	p.[Status], 
	p.[AuthorID], 
	p.[Rating],
	p.[RatingCount],
	p.[CommentCount], 
	pt.[Name] as 'PropertyTypeName',
	pt.[Description] as 'PropertyTypeDescription',
	(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID) as 'PhotoCount',
	(select top 1 [PhotoID] from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID order by SortOrder) as 'FirstPhotoID',
	u.[UserName],
	u.[DisplayName],
	u.[FirstName] + ' ' + u.[LastName] as 'FullName',
	u.[Email],
	m.[UserID] as 'ModifiedID',
	m.[Username] as 'ModifiedUsername',
	m.[DisplayName] as 'ModifiedDisplayName',
	m.[Email] as 'ModifiedEmail', 
	b.[BrokerID] as 'BrokerID',
	Broker.[Username] as 'BrokerUsername',
	Broker.[DisplayName] as 'BrokerDisplayName',
	Broker.[Email] as 'BrokerEmail' 
FROM #TempItems t
   	INNER JOIN {databaseOwner}{objectQualifier}ventrian_propertyagent_property p ON
       		t.PropertyID = p.PropertyID
	LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt 
		ON p.PropertyTypeID = pt.PropertyTypeID
	LEFT JOIN {databaseOwner}{objectQualifier}Users u ON p.AuthorID = u.UserID 
	LEFT JOIN {databaseOwner}{objectQualifier}Users m ON p.ModifiedID = m.UserID
	LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker b ON b.UserID = p.AuthorID and b.ModuleID = p.ModuleID 
	LEFT JOIN {databaseOwner}{objectQualifier}Users as Broker ON b.BrokerID = Broker.UserID 
WHERE
	ID > @startRowIndex
DROP TABLE #TempItems

SET ROWCOUNT 0

SELECT @strFields = 'SELECT Count(*) as ''TotalRecords'' '
if( @strWhereByFinal != '' )
BEGIN
EXEC(@strFields + @strFrom + @strWhereByFinal )
END
ELSE
BEGIN
EXEC(@strFields + @strFrom + @strWhere )
END
		
IF (@CustomFieldIDs is not null AND @SearchValues is not null)
BEGIN
	DROP TABLE #SearchItems 
END

IF (@PropertyTypeID is not null and @SearchSubTypes = 1 )
BEGIN
	drop table #stack
	drop table #hierarchy
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_BrokerList
	@PortalID int, 
	@ModuleID int,
	@Roles varchar(2000)
AS

DECLARE @strPortalID varchar(2000)
SELECT @strPortalID = convert(varchar, @PortalID)

DECLARE @strModuleID varchar(2000)
SELECT @strModuleID = convert(varchar, @ModuleID)

IF( @Roles != '' )
BEGIN
EXEC('
SELECT     {databaseOwner}{objectQualifier}Users.*
FROM         {databaseOwner}{objectQualifier}Users INNER JOIN
                      {databaseOwner}{objectQualifier}UserPortals ON {databaseOwner}{objectQualifier}Users.UserID = {databaseOwner}{objectQualifier}UserPortals.UserId
WHERE     
	({databaseOwner}{objectQualifier}UserPortals.PortalId = ' + @strPortalID + ') 
	and 
	{databaseOwner}{objectQualifier}Users.UserID in (SELECT {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker.BrokerID FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker INNER JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Property ON {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker.UserID = {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Property.AuthorID WHERE ({databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker.ModuleID = ' + @strModuleID + '))
	and
	{databaseOwner}{objectQualifier}Users.UserID in (SELECT {databaseOwner}{objectQualifier}UserRoles.UserID from {databaseOwner}{objectQualifier}UserRoles WHERE {databaseOwner}{objectQualifier}UserRoles.RoleID in (' + @Roles + '))')
END
GO
