ALTER TABLE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomField
	ADD RegularExpression nvarchar(500) NULL
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldAdd
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldAdd
	@ModuleID int,
	@Name nvarchar(255),
	@FieldType int,
	@FieldElements ntext,
	@FieldElementType int,
	@DefaultValue nvarchar(255),
	@Caption nvarchar(255),
	@CaptionHelp nvarchar(255),
	@IsInManager bit,
	@IsSortable bit,
	@IsInListing bit,
	@IsCaptionHidden bit,
	@IsFeatured bit,
	@IsPublished bit,
	@IsHidden bit,
	@IsSearchable bit,
	@IsLockDown bit,
	@SearchType int,
	@SortOrder int,
	@IsRequired bit, 
	@ValidationType int, 
	@FieldElementsFrom nvarchar(4000),
	@FieldElementsTo nvarchar(4000),
	@Length int,
	@RegularExpression nvarchar(500) 
AS

INSERT INTO {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomField (
	[ModuleID],
	[Name],
	[FieldType],
	[FieldElements],
	[FieldElementType],
	[DefaultValue],
	[Caption],
	[CaptionHelp],
	[IsInManager], 
	[IsSortable], 
	[IsInListing],
	[IsCaptionHidden],
	[IsFeatured],
	[IsPublished],
	[IsHidden],
	[IsSearchable],
	[IsLockDown], 
	[SearchType],
	[SortOrder],
	[IsRequired],
	[ValidationType],
	[FieldElementsFrom],
	[FieldElementsTo],
	[Length],
	[RegularExpression]
) VALUES (
	@ModuleID,
	@Name,
	@FieldType,
	@FieldElements,
	@FieldElementType,
	@DefaultValue,
	@Caption,
	@CaptionHelp,
	@IsInManager, 
	@IsSortable, 
	@IsInListing,
	@IsCaptionHidden,
	@IsFeatured,
	@IsPublished,
	@IsHidden,
	@IsSearchable,
	@IsLockDown,
	@SearchType,
	@SortOrder,
	@IsRequired,
	@ValidationType,
	@FieldElementsFrom,
	@FieldElementsTo,
	@Length,
	@RegularExpression
)

select SCOPE_IDENTITY()
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldGet
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldGet
	@CustomFieldID int
AS

SELECT
	[CustomFieldID],
	[ModuleID],
	[Name],
	[FieldType],
	[FieldElements],
	[FieldElementType],
	[DefaultValue],
	[Caption],
	[CaptionHelp],
	[IsInManager], 
	[IsSortable], 
	[IsInListing],
	[IsCaptionHidden],
	[IsFeatured],
	[IsPublished],
	[IsHidden],
	[IsSearchable],
	[IsLockDown],
	[SearchType],
	[SortOrder],
	[IsRequired],
	[ValidationType], 
	[FieldElementsFrom],
	[FieldElementsTo],
	[Length],
	[RegularExpression] 
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomField
WHERE
	[CustomFieldID] = @CustomFieldID
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldList
	@ModuleID int,
	@IsPublishedOnly bit 
AS

SELECT
	[CustomFieldID],
	[ModuleID],
	[Name],
	[FieldType],
	[FieldElements],
	[FieldElementType],
	[DefaultValue],
	[Caption],
	[CaptionHelp],
	[IsInManager], 
	[IsSortable], 
	[IsInListing],
	[IsCaptionHidden],
	[IsFeatured],
	[IsPublished],
	[IsHidden],
	[IsSearchable],
	[IsLockDown],
	[SearchType],
	[SortOrder],
	[IsRequired],
	[ValidationType], 
	[FieldElementsFrom],
	[FieldElementsTo],
	[Length],
	[RegularExpression]  
FROM 
	{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomField
WHERE
	[ModuleID] = @ModuleID 
	and
	(@IsPublishedOnly = 0 or IsPublished = 1)
ORDER BY
	[SortOrder]
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldUpdate
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldUpdate
	@CustomFieldID int, 
	@ModuleID int, 
	@Name nvarchar(255), 
	@FieldType int, 
	@FieldElements ntext, 
	@FieldElementType int, 
	@DefaultValue nvarchar(255), 
	@Caption nvarchar(255), 
	@CaptionHelp nvarchar(255), 
	@IsInManager bit, 
	@IsSortable bit, 
	@IsInListing bit, 
	@IsCaptionHidden bit, 
	@IsFeatured bit, 
	@IsPublished bit, 
	@IsHidden bit, 
	@IsSearchable bit, 
	@IsLockDown bit,
	@SearchType int, 
	@SortOrder int,
	@IsRequired bit,
	@ValidationType int, 
	@FieldElementsFrom nvarchar(4000),
	@FieldElementsTo nvarchar(4000),
	@Length int,
	@RegularExpression nvarchar(500) 
AS

UPDATE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomField SET
	[ModuleID] = @ModuleID,
	[Name] = @Name,
	[FieldType] = @FieldType,
	[FieldElements] = @FieldElements,
	[FieldElementType] = @FieldElementType,
	[DefaultValue] = @DefaultValue,
	[Caption] = @Caption,
	[CaptionHelp] = @CaptionHelp,
	[IsInListing] = @IsInListing,
	[IsCaptionHidden] = @IsCaptionHidden,
	[IsInManager] = @IsInManager, 
	[IsSortable] = @IsSortable, 
	[IsFeatured] = @IsFeatured,
	[IsPublished] = @IsPublished,
	[IsHidden] = @IsHidden,
	[IsSearchable] = @IsSearchable,
	[IsLockDown] = @IsLockDown,
	[SearchType] = @SearchType,
	[SortOrder] = @SortOrder,
	[IsRequired] = @IsRequired,
	[ValidationType] = @ValidationType,
	[FieldElementsFrom] = @FieldElementsFrom,
	[FieldElementsTo] = @FieldElementsTo,
	[Length] = @Length,
	[RegularExpression] = @RegularExpression  
WHERE
	[CustomFieldID] = @CustomFieldID
GO

CREATE FUNCTION {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_LatLonRadiusDistance 
(
	@lat1Degrees decimal(15,12),
	@lon1Degrees decimal(15,12),
	@lat2Degrees decimal(15,12),
	@lon2Degrees decimal(15,12)
)
RETURNS decimal(9,4)
AS
BEGIN

	DECLARE @earthSphereRadiusKilometres as decimal(10,6)
	DECLARE @nauticalMileConversionToMilesFactor as decimal(7,6)
	SELECT @earthSphereRadiusKilometres = 6366.707019
	SELECT @nauticalMileConversionToMilesFactor = .621371

	-- convert degrees to radians
	DECLARE @lat1Radians decimal(15,12)
	DECLARE @lon1Radians decimal(15,12)
	DECLARE @lat2Radians decimal(15,12)
	DECLARE @lon2Radians decimal(15,12)
	SELECT @lat1Radians = (@lat1Degrees / 180) * PI()
	SELECT @lon1Radians = (@lon1Degrees / 180) * PI()
	SELECT @lat2Radians = (@lat2Degrees / 180) * PI()
	SELECT @lon2Radians = (@lon2Degrees / 180) * PI()

	-- formula for distance from [lat1,lon1] to [lat2,lon2]
	RETURN ROUND(2 * ASIN(SQRT(POWER(SIN((@lat1Radians - @lat2Radians) / 2) ,2)
        + COS(@lat1Radians) * COS(@lat2Radians) * POWER(SIN((@lon1Radians - @lon2Radians) / 2), 2)))
        * (@earthSphereRadiusKilometres), 4)

END
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyList
	@ModuleID int, 
	@PropertyTypeID int,
	@Status int, 
	@AuthorID int, 
	@BrokerID int, 
	@IsActive bit,
	@IsPending bit,
	@IsExpired bit,
	@ShowFeaturedOnly bit,
	@SortBy int,
	@SortByID int,
	@SortByIDType int,
	@SortOrder int,
	@CustomFieldIDs nvarchar(4000),
	@SearchValues	nvarchar(4000),
	@PageNumber int, 
	@PageSize int,
	@BubbleFeatured bit,
	@SearchSubTypes bit,
	@PropertyIDForNextPrev int,
	@Latitude decimal(10,5),
	@Longitude decimal(10,5) 
AS

CREATE TABLE #TempItems 
(
   ID int IDENTITY,
   PropertyID int
)

IF( @PropertyTypeID is not null and @SearchSubTypes = 1 )
BEGIN
	DECLARE @current int
	SELECT @current = @PropertyTypeID
	DECLARE @level int, @line int
 
	CREATE TABLE #hierarchy(HierarchyID int IDENTITY (1,1), PropertyTypeID int, level int)
	CREATE TABLE #stack (item int, level int)
	INSERT INTO #stack VALUES (@current, 1)
	SELECT @level = 1
 
	WHILE @level > 0
	BEGIN
   		IF EXISTS (SELECT * FROM #stack WHERE level = @level)
      		BEGIN
         			SELECT @current = item
         			FROM #stack
         			WHERE level = @level
 
 			insert into #hierarchy(PropertyTypeID, level) values(@current, @level) 
 
         			DELETE FROM #stack
         			WHERE level = @level
            			AND item = @current
 
         			INSERT #stack
            			SELECT PropertyTypeID, @level + 1
            			FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType
            			WHERE ParentID = @current and ModuleID = @ModuleID 

         			IF @@ROWCOUNT > 0
            				SELECT @level = @level + 1
      			END
   		ELSE
     	 		SELECT @level = @level - 1
	END -- WHILE
END

IF (@CustomFieldIDs is not null AND @SearchValues is not null)
BEGIN
	CREATE TABLE #SearchItems 
	(
   		PropertyID int
	)

	INSERT INTO #SearchItems select PropertyID from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_CustomFieldSearch(@CustomFieldIDs, @SearchValues)
END
 
DECLARE @maxRow int
DECLARE @startRowIndex int

SET @startRowIndex = (@PageNumber * @PageSize)

IF( @PropertyIDForNextPrev is null ) 
BEGIN
	SET @maxRow = (@startRowIndex + @PageSize)
	SET ROWCOUNT @maxRow
END

DECLARE @strFields	nvarchar(2000)
DECLARE @strFrom	nvarchar(2000)
DECLARE @strWhere	nvarchar(2000)
DECLARE @strOrder	nvarchar(2000)

DECLARE @strWhereSortByConditional	nvarchar(2000)
DECLARE @strWhereByFinal	nvarchar(2000)

SELECT @strFields = 'SELECT p.[PropertyID] '
SELECT @strFrom = ' FROM {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Property p'
SELECT @strWhere = ' WHERE p.[ModuleID] = ' + convert(nvarchar, @ModuleId)
SELECT @strOrder = ' ORDER BY'

SELECT @strWhereSortByConditional = ''
SELECT @strWhereByFinal = ''

IF (@PropertyTypeID is not null and @SearchSubTypes = 1)
	SELECT @strWhere = @strWhere + ' AND p.PropertyTypeID in (select PropertyTypeID from #hierarchy)'

IF (@PropertyTypeID is not null and @SearchSubTypes = 0)
	SELECT @strWhere = @strWhere + ' AND p.PropertyTypeID = ' + convert(nvarchar, @PropertyTypeID)

IF (@Status is not null)
	SELECT @strWhere = @strWhere + ' AND p.Status = ' + convert(nvarchar, @Status)

IF (@AuthorID is not null)
BEGIN
	SELECT @strWhere = @strWhere + ' AND p.AuthorID = ' + convert(nvarchar, @AuthorID)
END

IF (@BrokerID is not null)
BEGIN
	SELECT @strWhere = @strWhere + ' AND (p.AuthorID = ' + convert(nvarchar, @BrokerID) + ' or p.AuthorID in (select b.UserID from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker b where b.BrokerID = ' + convert(nvarchar, @BrokerID) + '))'
END

IF (@IsActive is not null)
	SELECT @strWhere = @strWhere + ' AND (p.[DatePublished] < GetDate() and (p.[DateExpired] is null or p.[DateExpired] > GetDate()))'

IF (@IsPending is not null)
	SELECT @strWhere = @strWhere + ' AND (p.[DatePublished] > GetDate())'

IF (@IsExpired is not null)
	SELECT @strWhere = @strWhere + ' AND (p.[DateExpired] is not null and p.[DateExpired] < GetDate())'

IF (@ShowFeaturedOnly is not null)
	SELECT @strWhere = @strWhere + ' AND p.IsFeatured = 1'

IF (@CustomFieldIDs is not null AND @SearchValues is not null)
	SELECT @strWhere = @strWhere + ' AND (p.PropertyID in (select PropertyID from #SearchItems))'

IF (@BubbleFeatured = 1)
	SELECT @strOrder = @strOrder + ' p.[IsFeatured] DESC' 

IF (@SortBy = 8 AND (@Latitude IS NULL OR @Longitude IS NULL))
BEGIN
	SET @SortBy = 1
END

IF (@SortBy = 8)
BEGIN
	SELECT @strWhere = @strWhere + ' AND (p.[Latitude] IS NOT NULL AND p.[Longitude] IS NOT NULL)'
END

DECLARE @strOrder2 nvarchar(2000)	

IF (@SortBy = 3) 
BEGIN
	SELECT @strFrom = @strFrom + ' LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyValue pv ON p.PropertyID = pv.PropertyID AND pv.CustomFieldID = ' + convert(nvarchar, @SortByID) + ' '
	
	SELECT @strOrder2 = ''	
		
	IF( @SortOrder = 1 and @SortByIDType is null)
	BEGIN
		--SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) DESC, p.PropertyID ASC'
	END
		
	IF( @SortOrder = 0 and @SortByIDType is null)
	BEGIN
		--SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) ASC, p.PropertyID ASC'
	END
		
	IF( @SortOrder = 1 and (@SortByIDType <> 1 and @SortByIDType <> 2 and @SortByIDType <> 3 and @SortByIDType <> 4) )
	BEGIN
		--SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) DESC, p.PropertyID ASC'
	END

	IF( @SortOrder = 0 and (@SortByIDType <> 1 and @SortByIDType <> 2 and @SortByIDType <> 3 and @SortByIDType <> 4) )
	BEGIN
		--SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(pv.CustomValue as nvarchar) ASC, p.PropertyID ASC'
	END

	IF( @SortOrder = 1 and (@SortByIDType = 2) )
	BEGIN
		SELECT @strWhereSortByConditional = @strWhere + ' AND (pv.[CustomFieldID] is null)'
		SELECT @strWhereByFinal = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(cast(pv.CustomValue as nvarchar) as datetime) DESC, p.PropertyID ASC'
	END

	IF( @SortOrder = 0 and (@SortByIDType = 2) )
	BEGIN
		SELECT @strWhereSortByConditional = @strWhere + ' AND (pv.[CustomFieldID] is null)'
		SELECT @strWhereByFinal = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(cast(pv.CustomValue as nvarchar) as datetime) ASC, p.PropertyID ASC'
	END

	IF( @SortOrder = 1 and (@SortByIDType = 1 or @SortByIDType = 3 or @SortByIDType = 4) )
	BEGIN
		SELECT @strWhereSortByConditional = @strWhere + ' AND (pv.[CustomFieldID] is null)'
		SELECT @strWhereByFinal = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(cast(pv.CustomValue as nvarchar) as decimal) DESC, p.PropertyID ASC'
	END

	IF( @SortOrder = 0 and (@SortByIDType = 1 or @SortByIDType = 3 or @SortByIDType = 4) )
	BEGIN
		SELECT @strWhereSortByConditional = @strWhere + ' AND (pv.[CustomFieldID] is null)'
		SELECT @strWhereByFinal = @strWhere + ' AND (pv.[CustomFieldID] is null OR pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		
		SELECT @strWhere = @strWhere + ' AND (pv.[CustomFieldID] = ' + convert(nvarchar, @SortByID) + ')'
		SELECT @strOrder2 = ' cast(cast(pv.CustomValue as nvarchar) as decimal) ASC, p.PropertyID ASC'
	END

	IF( @strOrder = ' ORDER BY' ) 
	BEGIN
		SELECT @strOrder = @strOrder + @strOrder2
	END
	ELSE
	BEGIN
		SELECT @strOrder = @strOrder + ',' + @strOrder2
	END
END
ELSE
BEGIN
	SELECT @strOrder2 = ''	

	IF( @SortBy = 0 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DateModified], 120) DESC, p.PropertyID ASC'
	END

	IF( @SortBy = 0 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DateModified], 120) ASC, p.PropertyID ASC'
	END

	IF( @SortBy = 1 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DatePublished], 120) DESC, p.PropertyID ASC'
	END

	IF( @SortBy = 1 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' convert(varchar, p.[DatePublished], 120) ASC, p.PropertyID ASC'
	END

	IF( @SortBy = 2 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' p.[ViewCount] DESC, p.PropertyID ASC'
	END

	IF( @SortBy = 2 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' p.[ViewCount] ASC, p.PropertyID ASC'
	END

	IF( @SortBy = 4 )
	BEGIN
		SELECT @strOrder2 = ' CAST((rand(24701) * p.[PropertyID]) * 24701 AS int) % (DATEPART(ms, GetDate())+1) + DATEPART(ms, GetDate())'
	END

	IF( @SortBy = 5 )
	BEGIN
		SELECT @strFrom = @strFrom + ' LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt ON p.PropertyTypeID = pt.PropertyTypeID'
		IF( @SortOrder = 1 )
		BEGIN
			SELECT @strOrder2 = ' pt.[Name] DESC, p.PropertyID ASC'
		END

		IF( @SortOrder = 0 )
		BEGIN
			SELECT @strOrder2 = ' pt.[Name] ASC, p.PropertyID ASC'
		END
	END

	IF( @SortBy = 6 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' p.[CommentCount] DESC, p.PropertyID ASC'
	END

	IF( @SortBy = 6 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' p.[CommentCount] ASC, p.PropertyID ASC'
	END

	IF( @SortBy = 7 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' p.[Rating] DESC, p.PropertyID ASC'
	END

	IF( @SortBy = 7 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' p.[Rating] ASC, p.PropertyID ASC'
	END

	IF( @SortBy = 8 and @SortOrder = 1 )
	BEGIN
		SELECT @strOrder2 = ' {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_LatLonRadiusDistance(' + convert(nvarchar, @Latitude) + ',' + convert(nvarchar, @Longitude) + ',p.Latitude,p.Longitude) DESC, p.PropertyID ASC'
	END

	IF( @SortBy = 8 and @SortOrder = 0 )
	BEGIN
		SELECT @strOrder2 = ' {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_LatLonRadiusDistance(' + convert(nvarchar, @Latitude) + ',' + convert(nvarchar, @Longitude) + ',p.Latitude,p.Longitude) ASC, p.PropertyID ASC'
	END

	IF( @strOrder = ' ORDER BY' ) 
	BEGIN
		SELECT @strOrder = @strOrder + @strOrder2
	END
	ELSE
	BEGIN
		SELECT @strOrder = @strOrder + ',' + @strOrder2
	END
END

EXEC('INSERT INTO #TempItems (PropertyID) ' + @strFields + @strFrom + @strWhere + @strOrder)
IF( @strWhereSortByConditional != '' )
BEGIN
	EXEC('INSERT INTO #TempItems (PropertyID) ' + @strFields + @strFrom + @strWhereSortByConditional)
END

DECLARE @TypePosition int 
SELECT @TypePosition = 0

IF( @PropertyIDForNextPrev is not null ) 
BEGIN

	SELECT @TypePosition = MIN(s.ID)
	FROM #TempItems s
	WHERE PropertyID = @PropertyIDForNextPrev
	GROUP BY s.PropertyID

	IF( @TypePosition = 0 )
	BEGIN
		SET @TypePosition = 1000000
	END
	ELSE
	BEGIN
		IF( @TypePosition = 1 )
		BEGIN
			SELECT @PageSize = 2
		END
		ELSE
		BEGIN
			SELECT @PageSize = 3
		END

		IF( @TypePosition > 0 )
		BEGIN
			SELECT @startRowIndex = @TypePosition - 2
		END
	END
END

if( @PageSize > 0 )
	SET ROWCOUNT @PageSize

IF( @SortBy = 8 ) 
BEGIN
	SELECT
		p.[PropertyID],
		p.[ModuleID],
		p.[PropertyTypeID],
		p.[IsFeatured],
		p.[DateCreated],
		p.[DateModified],
		p.[DatePublished],
		p.[DateExpired],
		p.[ViewCount],
		p.[Status], 
		p.[AuthorID], 
		p.[Rating],
		p.[RatingCount],
		p.[CommentCount], 
		p.[Latitude],
		p.[Longitude], 
		{databaseOwner}{objectQualifier}Ventrian_PropertyAgent_LatLonRadiusDistance(@Latitude,@Longitude,p.Latitude,p.Longitude) as 'Distance',
		pt.[Name] as 'PropertyTypeName',
		pt.[Description] as 'PropertyTypeDescription',
		(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID) as 'PhotoCount',
		(select top 1 [PhotoID] from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID order by SortOrder) as 'FirstPhotoID',
		u.[UserName],
		u.[DisplayName],
		u.[FirstName] + ' ' + u.[LastName] as 'FullName',
		u.[Email],
		m.[UserID] as 'ModifiedID',
		m.[Username] as 'ModifiedUsername',
		m.[DisplayName] as 'ModifiedDisplayName',
		m.[Email] as 'ModifiedEmail', 
		b.[BrokerID] as 'BrokerID',
		Broker.[Username] as 'BrokerUsername',
		Broker.[DisplayName] as 'BrokerDisplayName',
		Broker.[Email] as 'BrokerEmail' 
	FROM #TempItems t
   		INNER JOIN {databaseOwner}{objectQualifier}ventrian_propertyagent_property p ON
       			t.PropertyID = p.PropertyID
		LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt 
			ON p.PropertyTypeID = pt.PropertyTypeID
		LEFT JOIN {databaseOwner}{objectQualifier}Users u ON p.AuthorID = u.UserID 
		LEFT JOIN {databaseOwner}{objectQualifier}Users m ON p.ModifiedID = m.UserID
		LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker b ON b.UserID = p.AuthorID and b.ModuleID = p.ModuleID
		LEFT JOIN {databaseOwner}{objectQualifier}Users as Broker ON b.BrokerID = Broker.UserID 
	WHERE
		ID > @startRowIndex
END
ELSE
BEGIN
	SELECT
		p.[PropertyID],
		p.[ModuleID],
		p.[PropertyTypeID],
		p.[IsFeatured],
		p.[DateCreated],
		p.[DateModified],
		p.[DatePublished],
		p.[DateExpired],
		p.[ViewCount],
		p.[Status], 
		p.[AuthorID], 
		p.[Rating],
		p.[RatingCount],
		p.[CommentCount], 
		p.[Latitude],
		p.[Longitude], 
		pt.[Name] as 'PropertyTypeName',
		pt.[Description] as 'PropertyTypeDescription',
		(select count(*) from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID) as 'PhotoCount',
		(select top 1 [PhotoID] from {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Photo photo where p.PropertyID = photo.PropertyID order by SortOrder) as 'FirstPhotoID',
		u.[UserName],
		u.[DisplayName],
		u.[FirstName] + ' ' + u.[LastName] as 'FullName',
		u.[Email],
		m.[UserID] as 'ModifiedID',
		m.[Username] as 'ModifiedUsername',
		m.[DisplayName] as 'ModifiedDisplayName',
		m.[Email] as 'ModifiedEmail', 
		b.[BrokerID] as 'BrokerID',
		Broker.[Username] as 'BrokerUsername',
		Broker.[DisplayName] as 'BrokerDisplayName',
		Broker.[Email] as 'BrokerEmail' 
	FROM #TempItems t
   		INNER JOIN {databaseOwner}{objectQualifier}ventrian_propertyagent_property p ON
       			t.PropertyID = p.PropertyID
		LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_PropertyType pt 
			ON p.PropertyTypeID = pt.PropertyTypeID
		LEFT JOIN {databaseOwner}{objectQualifier}Users u ON p.AuthorID = u.UserID 
		LEFT JOIN {databaseOwner}{objectQualifier}Users m ON p.ModifiedID = m.UserID
		LEFT JOIN {databaseOwner}{objectQualifier}Ventrian_PropertyAgent_Broker b ON b.UserID = p.AuthorID and b.ModuleID = p.ModuleID
		LEFT JOIN {databaseOwner}{objectQualifier}Users as Broker ON b.BrokerID = Broker.UserID 
	WHERE
		ID > @startRowIndex
END

DROP TABLE #TempItems

SET ROWCOUNT 0

SELECT @strFields = 'SELECT Count(*) as ''TotalRecords'' '
if( @strWhereByFinal != '' )
BEGIN
	EXEC(@strFields + @strFrom + @strWhereByFinal )
END
ELSE
BEGIN
	EXEC(@strFields + @strFrom + @strWhere )
END

IF (@CustomFieldIDs is not null AND @SearchValues is not null)
BEGIN
	DROP TABLE #SearchItems 
END

IF (@PropertyTypeID is not null and @SearchSubTypes = 1)
BEGIN
	drop table #stack
	drop table #hierarchy
END

SELECT @TypePosition AS 'TypePosition'
GO
